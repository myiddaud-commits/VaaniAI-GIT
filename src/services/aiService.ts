import { supabase } from '../lib/supabase';

interface AIResponse {
  message: string;
  error?: string;
}

class AIService {
  private apiKey: string = '';
  private selectedModel: string = 'openrouter/sonoma-dusk-alpha';
  private baseUrl: string = 'https://openrouter.ai/api/v1';
  private useLocalStorage: boolean = true;

  constructor() {
    this.loadApiConfig();
  }

  private async loadApiConfig() {
    // Always use localStorage for fast local API access
    this.loadFromLocalStorage();
  }

  private loadFromLocalStorage() {
    try {
      const saved = localStorage.getItem('vaaniai-api-config');
      if (saved) {
        const config = JSON.parse(saved);
        this.apiKey = config.openRouterKey || '';
        this.selectedModel = config.selectedModel || 'openrouter/sonoma-dusk-alpha';
        console.log('Loaded API config from localStorage:', { 
          hasApiKey: !!this.apiKey, 
          model: this.selectedModel 
        });
      } else {
        console.log('No API config found in localStorage - using default demo key');
        this.apiKey = '';
        this.selectedModel = 'openrouter/sonoma-dusk-alpha';
      }
    } catch (error) {
      console.error('Error loading from localStorage:', error);
      this.apiKey = '';
      this.selectedModel = 'openrouter/sonoma-dusk-alpha';
    }
  }

  private saveToLocalStorage() {
    try {
      const config = {
        openRouterKey: this.apiKey,
        selectedModel: this.selectedModel,
        updatedAt: new Date().toISOString()
      };
      localStorage.setItem('vaaniai-api-config', JSON.stringify(config));
      console.log('Saved API config to localStorage');
    } catch (error) {
      console.error('Error saving to localStorage:', error);
    }
  }

  // Method to update API key dynamically
  public updateApiKey(newApiKey: string) {
    this.apiKey = newApiKey;
    this.saveToLocalStorage();
  }

  // Method to update selected model
  public updateSelectedModel(newModel: string) {
    this.selectedModel = newModel;
    this.saveToLocalStorage();
  }

  // Method to get current API configuration from localStorage
  public getApiConfig() {
    return {
      openrouter_key: this.apiKey,
      selected_model: this.selectedModel,
      max_tokens: 500,
      temperature: 0.7
    };
  }

  async generateResponse(message: string, isGuest: boolean = false): Promise<AIResponse> {
    // Load API config from localStorage for fast access
    this.loadFromLocalStorage();
    
    // Check if API key is available
    if (!this.apiKey) {
      console.error('No OpenRouter API key configured');
      return {
        message: "ЁЯФС API рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди рдХреА рд╕рдорд╕реНрдпрд╛ рд╣реИред рдХреГрдкрдпрд╛ рдПрдбрдорд┐рди рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред ЁЯЫая╕П",
        error: 'No API key configured'
      };
    }
    
    try {
      const systemPrompt = `You are VaaniAI, a helpful AI assistant that responds in Hindi (Devanagari script). You are designed to help users with various questions and tasks in Hindi language.

CRITICAL RULES:
1. ALWAYS respond in Hindi (Devanagari script) - Never translate user's Hindi to English
2. If user writes in Hindi/Hinglish, keep your response in Hindi
3. If user asks "kya hai" respond with "рдХреНрдпрд╛ рд╣реИ" explanation in Hindi
4. Be helpful, friendly, and conversational in Hindi
5. Use appropriate emojis to enhance responses
6. Keep responses concise but informative in Hindi
7. If asked about technical topics, explain in simple Hindi terms
8. Always maintain a respectful and professional tone
9. Do NOT translate or change the user's language - preserve their intent in Hindi

Examples:
- User: "kya hai" тЖТ You: "рдпрд╣ рдХреНрдпрд╛ рд╣реИ? рдХреГрдкрдпрд╛ рдЕрдзрд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рджреЗрдВред ЁЯдФ"
- User: "hello" тЖТ You: "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рд╕рд╣рд╛рдпрддрд╛ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ? ЁЯШК"
- User: "AI kya hai" тЖТ You: "AI рдпрд╛рдиреА рдЖрд░реНрдЯрд┐рдлрд┐рд╢рд┐рдпрд▓ рдЗрдВрдЯреЗрд▓рд┐рдЬреЗрдВрд╕ рдПрдХ рддрдХрдиреАрдХ рд╣реИ рдЬреЛ рдорд╢реАрдиреЛрдВ рдХреЛ рдЗрдВрд╕рд╛рдиреЛрдВ рдХреА рддрд░рд╣ рд╕реЛрдЪрдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддреА рд╣реИред ЁЯдЦ"`;

      // Get current API configuration for request parameters
      const apiConfig = this.getApiConfig();
      const maxTokens = apiConfig.max_tokens || 500;
      const temperature = apiConfig.temperature || 0.7;

      console.log('Making API request with:', {
        model: this.selectedModel,
        hasApiKey: !!this.apiKey,
        maxTokens,
        temperature
      });

      const response = await fetch(`${this.baseUrl}/chat/completions`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json',
          'HTTP-Referer': window.location.origin,
          'X-Title': 'VaaniAI Hindi Chatbot'
        },
        body: JSON.stringify({
          model: this.selectedModel,
          messages: [
            {
              role: 'system',
              content: systemPrompt
            },
            {
              role: 'user',
              content: message
            }
          ],
          max_tokens: maxTokens,
          temperature: temperature,
          top_p: 0.9,
          frequency_penalty: 0.1,
          presence_penalty: 0.1
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('API request failed:', response.status, errorText);
        throw new Error(`API request failed: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.choices && data.choices[0] && data.choices[0].message) {
        return {
          message: data.choices[0].message.content.trim()
        };
      } else {
        throw new Error('Invalid response format from API');
      }
    } catch (error) {
      console.error('AI Service Error:', error);
      
      // Fallback responses for different scenarios
      const fallbackResponses = isGuest ? [
        "ЁЯЩП рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, AI рд╕реЗрд╡рд╛ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реИред рдПрдбрдорд┐рди рдкреИрдирд▓ рдореЗрдВ API рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди рдЪреЗрдХ рдХрд░реЗрдВред ЁЯФз",
        "тЪая╕П OpenRouter API key рд╕реЗрдЯ рдирд╣реАрдВ рд╣реИред рдХреГрдкрдпрд╛ рдПрдбрдорд┐рди рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред ЁЯФС",
        "ЁЯдЦ API рдХрдиреЗрдХреНрд╢рди рдХреА рд╕рдорд╕реНрдпрд╛ рд╣реИред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред ЁЯФД"
      ] : [
        "ЁЯЩП рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, AI рд╕реЗрд╡рд╛ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реИред рдПрдбрдорд┐рди рдкреИрдирд▓ рдореЗрдВ API рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди рдЪреЗрдХ рдХрд░реЗрдВред ЁЯФз",
        "тЪая╕П OpenRouter API key рд╕реЗрдЯ рдирд╣реАрдВ рд╣реИред рдХреГрдкрдпрд╛ рдПрдбрдорд┐рди рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред ЁЯФС",
        "ЁЯдЦ API рдХрдиреЗрдХреНрд╢рди рдХреА рд╕рдорд╕реНрдпрд╛ рд╣реИред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ. ЁЯФД"
      ];

      return {
        message: fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)],
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  // New method for image analysis
  async analyzeImage(imageBase64: string, userMessage: string = ''): Promise<AIResponse> {
    // Load API config from localStorage for fast access
    this.loadFromLocalStorage();
    
    // Check if API key is available
    if (!this.apiKey) {
      console.error('No OpenRouter API key configured');
      return {
        message: "ЁЯФС API рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди рдХреА рд╕рдорд╕реНрдпрд╛ рд╣реИред рдХреГрдкрдпрд╛ рдПрдбрдорд┐рди рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред ЁЯЫая╕П",
        error: 'No API key configured'
      };
    }
    
    try {
      const systemPrompt = `You are VaaniAI, a helpful AI assistant that can analyze images and respond in Hindi (Devanagari script). When analyzing images, provide detailed descriptions in Hindi.

CRITICAL RULES for Image Analysis:
1. ALWAYS respond in Hindi (Devanagari script)
2. Describe what you see in the image in detail
3. If user asks specific questions about the image, answer in Hindi
4. Be descriptive and helpful
5. Use appropriate emojis to enhance responses
6. If you can identify objects, people, text, or scenes, mention them in Hindi
7. If there's text in the image, try to read and translate it to Hindi if needed
8. Be respectful and appropriate in descriptions

Examples:
- "рдЗрд╕ рддрд╕реНрд╡реАрд░ рдореЗрдВ рдореБрдЭреЗ рдПрдХ рд╕реБрдВрджрд░ рдмрдЧреАрдЪрд╛ рджрд┐рдЦ рд░рд╣рд╛ рд╣реИ рдЬрд┐рд╕рдореЗрдВ рд░рдВрдЧ-рдмрд┐рд░рдВрдЧреЗ рдлреВрд▓ рд╣реИрдВред ЁЯМ╕"
- "рдпрд╣ рдПрдХ рдмрд┐рд▓реНрд▓реА рдХреА рддрд╕реНрд╡реАрд░ рд╣реИ рдЬреЛ рд╕реЛ рд░рд╣реА рд╣реИред рдмрд╣реБрдд рдкреНрдпрд╛рд░реА рд▓рдЧ рд░рд╣реА рд╣реИ! ЁЯШ║"
- "рдЗрд╕ рдЗрдореЗрдЬ рдореЗрдВ рдХреБрдЫ рдЯреЗрдХреНрд╕реНрдЯ рд▓рд┐рдЦрд╛ рд╣реИ рдЬреЛ рдХрд╣рддрд╛ рд╣реИ..."`;

      // Use a vision-capable model for image analysis
      const visionModel = 'openai/gpt-4o-mini'; // This model supports vision
      
      const messages = [
        {
          role: 'system',
          content: systemPrompt
        },
        {
          role: 'user',
          content: [
            {
              type: 'text',
              text: userMessage || 'рдЗрд╕ рдЗрдореЗрдЬ рдореЗрдВ рдХреНрдпрд╛ рд╣реИ? рдХреГрдкрдпрд╛ рд╡рд┐рд╕реНрддрд╛рд░ рд╕реЗ рдмрддрд╛рдПрдВред'
            },
            {
              type: 'image_url',
              image_url: {
                url: `data:image/jpeg;base64,${imageBase64}`
              }
            }
          ]
        }
      ];

      console.log('Making vision API request with model:', visionModel);

      const response = await fetch(`${this.baseUrl}/chat/completions`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json',
          'HTTP-Referer': window.location.origin,
          'X-Title': 'VaaniAI Hindi Chatbot - Image Analysis'
        },
        body: JSON.stringify({
          model: visionModel,
          messages: messages,
          max_tokens: 800,
          temperature: 0.7,
          top_p: 0.9
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Vision API request failed:', response.status, errorText);
        throw new Error(`Vision API request failed: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.choices && data.choices[0] && data.choices[0].message) {
        return {
          message: data.choices[0].message.content.trim()
        };
      } else {
        throw new Error('Invalid response format from Vision API');
      }
    } catch (error) {
      console.error('Image Analysis Error:', error);
      
      return {
        message: "ЁЯЦ╝я╕П рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдЗрдореЗрдЬ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реБрдИред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред ЁЯФД",
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  // Method to test API connectivity
  async testConnection(): Promise<boolean> {
    try {
      const response = await this.generateResponse('рдирдорд╕реНрддреЗ', false);
      return !response.error;
    } catch (error) {
      return false;
    }
  }
}

export const aiService = new AIService();